# ~/.gitconfig_alias
# =============================================================================
# Aliases for Git sourced by `~/.gitconfig`.

[alias]
    # List available aliases.
    aliases = config --get-regexp alias

    # Amends the currently staged files to the latest commit.
    amend = commit --amend --reuse-message=HEAD

    # Lists all branches.
    br = branch

    # Shows verbose output about branches.
    branches = branch -a

    # Clones a repository including all submodules.
    c = clone --recursive

    # Saves changes to the local repo.
    ci = commit

    # Save changes to local repo with message.
    cm = commit -m

    # Switches to a branch, but doesn't create it.
    co = checkout

    # Shows list of files in a conflict state.
    conflicts = !git diff --name-only --diff-filter=U

    # Lists contributors with number of commits.
    contributors = shortlog --summary --numbered

    # Shows the diff between the latest commit and the current state.
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # Shows the diff between the state `$number` revisions ago and the current state.
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Discards changes to a file.
    discard = checkout --

    # Removes branches that have been merged with master (delete merged).
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Pretty-prints object's content.
    dump = cat-file -p

    # Finds branches containing commit.
    fb = "!f() { git branch -a --contains $1; }; f"

    # Switches to a branch, creating it if necessary.
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Ignores case and skip binary files.
    grep = grep -Ii

    # Show ingored files in repo.
    ignored = ls-files --ignored --exclude-standard --others

    # Shows short SHA, description, and history graph of last 20 commits.
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # Shows short SHA, description, history graph, time, and author of commits.
    ll = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

    # Shows short SHA, date, description, history graph, and author of commits.
    lo = log --pretty=format:\"%Cred%h%Creset %Cgreen%ad%Creset | %s%C(auto)%d%Creset %C(bold blue)<%an>%Creset\" --graph --date=short

    # Writes dangling objects to lost and found.
    lost = fsck --lost-found

    # Useful when you have to update your last commit with staged files without editing the commit message.
    oops = commit --amend --no-edit

    # Pulls in remote changes for the current repository and all its submodules.
    p = pull --recurse-submodules

    # Forces push without overwriting the work of others.
    pushf = push --force-with-lease

    # Rebase wonâ€™t trigger hooks on each "replayed" commit. This is an ugly hack that will replay each commit during rebase with the standard `commit` command which will trigger hooks.
    rebase-with-hooks = rebase -x 'git reset --soft HEAD~1 && git commit -C HEAD@{1}'

    # Shows verbose output about remotes.
    remotes = remote -v

    # Restores savepoint.
    restore = "!f(){ git add -A && git commit -qm 'RESTORE SAVEPOINT'; git reset $1 --hard; }; f"

    # List local commits that were not pushed to remote repository.
    review-local = "!git lg @{push}.."

    # Edit last commit message.
    reword = commit --amend

    # Shows the current working tree status using the short format.
    s = status -sb

    # Saves savepoint.
    save = !git add -A && git commit -m 'SAVEPOINT'

    # Sets origin remote.
    set-origin = remote set-url origin

    # Sets upstream remote.
    set-upstream = remote set-url upstream

    # Displays repo disk consumption.
    size = git count-objects -v --human-readable

    # Pulls remota and auto-updates local submodules.
    spull = !git pull && git submodule sync --recursive && git submodule update --init --recursive

    # Pushes to remote, including all its submodules recursively.
    spush = push --recurse-submodules=on-demand

    # Views the current working tree status.
    st = status

    # Lists stashes.
    stashes = stash list

    # Brings in remote changes and syncs back.
    sync = !git pull --rebase && git push

    # Shows verbose output about tags.
    tags = tag -l

    # Shows object type.
    type = cat-file -t

    # Show tracked files in repo.
    tracked = ls-files --exclude-standard

    # Undos commit and leaves files (only for non-public commits).
    uncommit = reset --soft HEAD^

    # Undos last commit.
    undo = reset HEAD~1 --mixed

    # Unstages a file.
    unstage = reset -q HEAD --

    # Remove file(s) from Git but not from disk.
    untrack = rm --cache --

    # Show untracked files in repo.
    untracked = ls-files --exclude-standard --others

    # Brings in remote changes.
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive

    # Commits as Work in Progress.
    wip = commit -am "WIP"

    # Wipes savepoint.
    wipe = "!f() { rev=$(git rev-parse ${1-HEAD}); git add -A && git commit --allow-empty -qm 'WIPE SAVEPOINT' && git reset $rev --hard; }; f"
