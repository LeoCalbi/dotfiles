# ~/.local/share/chezmoi/home/.chezmoiscripts/run_once_3_chocolatey.ps1
# ============================================================================

#------------------------------------------------------------------------------
#                       			Chocolatey
#------------------------------------------------------------------------------

#Requires -RunAsAdministrator

Write-Output "Configuring Chocolatey Package Manager..."
# -- Install Chocolatey on the local machine if not already present
if (-not (Get-Command "choco" -ErrorAction SilentlyContinue)) {
	Write-Output "Chocolatey not installed, installing chocolatey..."
	Set-ExecutionPolicy Bypass -Scope Process -Force
	[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
	Invoke-WebRequest -Uri https://chocolatey.org/install.ps1 -UseBasicParsing | Invoke-Expression
}

# -- Set up chocolatey configuration and features
Update-SessionEnvironment
# Default global confirmation
choco feature enable --name='allowGlobalConfirmation' --limitoutput
# Remember install argument for upgrades, usefull for `choco upgrade all`
choco feature enable --name='useRememberedArgumentsForUpgrades' --limitoutput
# Move chocolatey cache out of $TEMP for better management
choco config set --name='cacheLocation' --value='C:\ProgramData\choco-cache' --limitoutput
# Set higher command Execution timeout (4 hours)
choco config set --name='commandExecutionTimeoutSeconds' --value='14400' --limitoutput
# Change default C:\Tools\ Chocolatey tools Location to a custom one if needed
$ChocolateyToolsLocation = "{{ .choco_tools }}"
Write-Output "Updating Enviroment Variable ChocolateyToolsLocation: $Env:ChocolateyToolsLocation -> $ChocolateyToolsLocation"

[System.Environment]::SetEnvironmentVariable("ChocolateyToolsLocation", $ChocolateyToolsLocation, [System.EnvironmentVariableTarget]::User)
Remove-Variable -Name "ChocolateyToolsLocation"
Write-Output "...Completed configuration of Chocolatey Package Manager"
#------------------------------------------------------------------------------
#                       	Chocolatey Packages
#------------------------------------------------------------------------------
Write-Output "Configuring Packages from Chocolatey..."
$PackagesToInstall = [ordered]@{
    '7zip'                       = '';
	'adobereader'                = ' --params=''"/ NoUpdates"''';
    'age.portable'               = '';
	'bitwarden'                  = '';
	'bitwarden-cli'              = '';
    'brave'                      = '';
	'chezmoi'                    = '';
	'choco-cleaner'              = '';
	'choco-package-list-backup'  = ' --params=''"/ NORUN:TRUE"''';
	'chocolateygui'              = ' --params=''"/ ShowConsoleOutput = $true / DefaultToDarkMode = $true / Global"''';
	'chrome-remote-desktop-host' = '';
	'curl'                       = '';
    'ddu'                        = '';
	'discord'                    = '';
	'eartrumpet'                 = '';
    'Everything'                 = '';
	'f.lux'                      = '';
    'ferdium'                    = '';
	'ffmpeg'                     = '';
	'filezilla'                  = '';
    'firefox'                    = '';
	'gh'                         = '';
	'git'                        = ' --params= ''"/GitOnlyOnPath /WindowsTerminal /NoShellIntegration"''';
    'git-status-posh-client'     = '';
	'gnupg'                      = '';
	'google-drive-file-stream'   = '';
	# 'googlechrome'               = '';
    'gsudo'                      = '';
	'jdk8'                       = ' --params= ''"both= true source= false"''';
	'jre8'                       = '';
    'kubernetes-cli'             = '';
    'kubernetes-helm'            = '';
    'mailspring'                 = '';
	'micro'                      = '';
    'microsoft-teams'            = '';
	'microsoft-windows-terminal' = '';
    # 'miniconda3'                 = '';
    'msedgeredirect'             = '';
	'nuget.commandline'          = '';
	'nvm'                        = '';
    'obsidian'                   = '';
    # 'oh-my-posh'                 = '';
	'openssh'                    = ' --params= ''"/PathSpecsToProbeForShellEXEString:$Env:ProgramFiles\PowerShell\*\Powershell.exe; $Env:WinDir\System32\WindowsPowershell\v1.0\powershell.exe"''';
	'openssl'                    = '';
	'paint.net'                  = '';
	'pdf24'                      = ' --params=''"/ Basic"''';
	'peazip'                     = '';
	'powershell'                 = '';
	'powertoys'                  = '';
	'pwsh'                       = ' --install-arguments= ''"REGISTER_MANIFEST=1"''';
	'qbittorrent'                = '';
    'quicklook'                  = '';
    'rufus'                      = '';
	'speccy'                     = '';
	'spotify'                    = '';
	'sublimetext4'               = '';
	# 'teamviewer'                 = '';
	'telegram'                   = '';
	'vlc'                        = '';
	'vscode'                     = ' --params=''"/ NoDesktopIcon"''';
	'wget'                       = '';
}
$InstalledPackages = choco list -l -r --id-only
foreach ($pack in $PackagesToInstall.GetEnumerator()) {
	if (-not ($InstalledPackages -contains $pack.Key)) {
		choco install $pack.Key $pack.Value
	}
	else {
		Write-Output "$PackageName already installed, skipping."
	}
}
# Make sure that all the additions to the System Variables and the enviroment are available
Update-SessionEnvironment

Write-Output "... Completed configuration of Packages from Chocolatey"
