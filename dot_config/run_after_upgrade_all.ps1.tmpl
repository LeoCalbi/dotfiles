# ~/.local/share/chezmoi/run_after_upgrade_all.ps1
# ============================================================================
# Runs after `chezmoi apply` to upgrade modules, packages installed by chezmoi.
#
# This script file links the configuration file to its proper destination on
# Windows. Chezmoi will skip this script on other operating systems.
# See https://www.chezmoi.io/docs/how-to/
#
# {{- /* This file supports Go's text/template language. */}}
# {{ if eq .chezmoi.os "windows" -}}

<#
	.SYNOPSIS
		Script to upgrade packages and modules installed by the dotfiles manager.
	.DESCRIPTION
		Script to upgrade packages and modules installed by the dotfiles manager.
	.NOTES
		Leonardo Calbi
	.LINK
		https://github.com/LeoCalbi/dotfiles
#>


#------------------------------------------------------------------------------
#                       			Chocolatey packages
#------------------------------------------------------------------------------
Write-Host "Upgrading Chocolatey packages..."
if (Get-Command "choco") {
    Start-Process -Wait -FilePath cmd -Verb RunAs -ArgumentList "/c choco upgrade all"
}
else {
    Write-Error "Chocolatey not found. Check for errors."
}
Write-Host "...Chocolatey packages upgrade completed"
#------------------------------------------------------------------------------
#                       			Powershell Modules
#------------------------------------------------------------------------------
Write-Host "Upgrading Powershell Modules..."
if (Get-Command "powershell") {
    Write-Host "Upgrading modules in System Powershell..."
    Start-Process -Wait -FilePath powershell -Verb RunAs -ArgumentList "-NoLogo -NoProfile -NonInteractive -Command Update-Module"
    # Remove old unused version of modules Requires MyUtilities sub-module named modules
    Start-Process -Wait -FilePath powershell -Verb RunAs -ArgumentList "-NoLogo -NoProfile -NonInteractive -Command Import-Module MyUtilities; Uninstall-AllOldVersionsAllModules"
}
if (Get-Command "pwsh") {
    Write-Host "Upgrading modules in Core Powershell..."
    Start-Process -Wait -FilePath pwsh -Verb RunAs -ArgumentList "-NoLogo -NoProfile -NonInteractive -Command Update-Module"

    # Remove old unused version of modules Requires MyUtilities sub-module named modules
    Start-Process -Wait -FilePath powershell -Verb RunAs -ArgumentList "-NoLogo -NoProfile -NonInteractive -Command Import-Module MyUtilities; Uninstall-AllOldVersionsAllModules"
}
Write-Host "...Powershell Modules upgrade completed"

#------------------------------------------------------------------------------
#                       	Custom Powershell Modules
#------------------------------------------------------------------------------
if (Get-Command "git") {
    $psmodules = Join-Path -Path $Env:USERPROFILE -ChildPath "\.config\psmodules\"
    if (Test-Path -Path $psmodules) {
        Write-Host "Upgrading custom Powershell modules..."
        $repos = Get-ChildItem -Path $psmodules -Directory
        foreach ($r in $repos) {
            git -C $r fetch
            git -C $r pull
        }
        Write-Host "...Custom Powershell modules upgrade completed"
    }
    else {
        Write-Host "No custom Powershell modules found."
    }
}
else {
    Write-Warning "Git not found unable to upgrade Custom Modules, skipping them."
}

# {{- end }}
